function insertDateHeaderAndCounts() {
  const CONFIG = {
    spreadsheetId: '1GXKS4kV-TWX2eJFX0dFArjeJEj0QlcbUHrm6iVq-oh8',
    sheetName: "HIFS",
    folderId: '1iSAW15y_KbgNMrfGhHLBYDxOzfY-BOCG'
  };

  const sheet = SpreadsheetApp.openById(CONFIG.spreadsheetId).getSheetByName(CONFIG.sheetName);
  if (!sheet) {
    Logger.log(`‚ùå Sheet '${CONFIG.sheetName}' not found.`);
    return;
  }

  const data = sheet.getDataRange().getValues();
  const currentYear = new Date().getFullYear().toString();
  Logger.log(`üìÖ Current Year: ${currentYear}`);

  const yearRowIndex = data.findIndex(row => row[0]?.toString().trim() === currentYear);
  if (yearRowIndex === -1) {
    Logger.log(`‚ùå Year row '${currentYear}' not found in the sheet.`);
    return;
  }

  const headerText = getPreviousWeekDateRangeFormatted();
  const headerColumnIndex = ensureDateHeader(sheet, data[yearRowIndex], yearRowIndex, headerText);
  Logger.log(`üìç Target Row: ${yearRowIndex + 1}, Target Column: ${headerColumnIndex + 1}`);

  updateHIFStartedCount(sheet, data, yearRowIndex, headerColumnIndex, CONFIG.folderId);
  updateCumulativeCount(sheet, data, headerColumnIndex, CONFIG.folderId);
  updateEligibleAssignments(sheet, data, headerColumnIndex, CONFIG.folderId);
  updateYearlyChange(sheet, data, headerColumnIndex);
  updateNonEligibleAssignments(sheet, data, headerColumnIndex, CONFIG.folderId);
  updateLLCInterestNoted(sheet, data, headerColumnIndex, CONFIG.folderId);
  updateLLCApplicationsSubmitted(sheet, data, headerColumnIndex, CONFIG.folderId);


}

function getPreviousWeekDateRangeFormatted() {
  const today = new Date();
  const day = today.getDay();
  const lastMonday = new Date(today);
  lastMonday.setDate(today.getDate() - (day === 0 ? 6 : day - 1) - 7);
  const lastSunday = new Date(lastMonday);
  lastSunday.setDate(lastMonday.getDate() + 6);
  return `${formatDate(lastMonday)} - ${formatDate(lastSunday)}`;
}

function formatDate(date) {
  return Utilities.formatDate(date, Session.getScriptTimeZone(), "MM/dd/yyyy");
}

function ensureDateHeader(sheet, yearRow, yearRowIndex, headerText) {
  let colIndex = yearRow.indexOf(headerText);

  if (colIndex === -1) {
    colIndex = yearRow.findIndex((val, i) => i > 0 && val === "");
    if (colIndex === -1) colIndex = yearRow.length;
    sheet.getRange(yearRowIndex + 1, colIndex + 1).setValue(headerText);
    Logger.log(`‚úÖ Inserted date header: ${headerText}`);
  } else {
    Logger.log(`‚ÑπÔ∏è Date header already exists: ${headerText}`);
  }

  return colIndex;
}

function updateHIFStartedCount(sheet, data, yearRowIndex, colIndex, folderId) {
  const targetRowIndex = yearRowIndex + 1;
  const rowLabel = data[targetRowIndex]?.[0]?.toString().trim();

  if (rowLabel === "HIF Started (not signed or completed)") {
    const count = getCSVStatusCount(folderId, ["HIF Started"]);
    if (count !== null) {
      sheet.getRange(targetRowIndex + 1, colIndex + 1).setValue(count);
      Logger.log(`‚úÖ Inserted HIF Started count: ${count}`);
    } else {
      Logger.log("‚ùå Could not retrieve HIF Started count.");
    }
  } else {
    Logger.log("‚ùå 'HIF Started (not signed or completed)' row not found immediately after the year row.");
  }
}

function updateCumulativeCount(sheet, data, colIndex, folderId) {
  const currentYear = new Date().getFullYear().toString();
  const yearRowIndex = data.findIndex(row => row[0]?.toString().trim() === currentYear);

  if (yearRowIndex === -1) {
    Logger.log(`‚ùå Year row '${currentYear}' not found.`);
    return;
  }

  const rowLabel = "Cumulative total Completed*/Signed (no started)";
  let targetRowIndex = -1;

  for (let i = yearRowIndex + 1; i < Math.min(data.length, yearRowIndex + 20); i++) {
    if (data[i][0]?.toString().trim() === rowLabel) {
      targetRowIndex = i;
      break;
    }
  }

  if (targetRowIndex !== -1) {
    const cellValue = sheet.getRange(targetRowIndex + 1, colIndex + 1).getValue();
    Logger.log(`üîç Checking cell: Row ${targetRowIndex + 1}, Col ${colIndex + 1}, Current Value: ${cellValue}`);

    if (cellValue === "" || cellValue === null || cellValue.toString().trim() === "") {
      const count = getCSVStatusCount(folderId, ["HIF Signed", "HIF Completed"]);
      if (count !== null) {
        sheet.getRange(targetRowIndex + 1, colIndex + 1).setValue(count);
        Logger.log(`‚úÖ Inserted cumulative count: ${count}`);
      } else {
        Logger.log("‚ùå Could not retrieve cumulative count.");
      }
    } else {
      Logger.log(`‚ÑπÔ∏è Cell already has value (${cellValue}); skipping update.`);
    }

    updateCumulativeTotalWithStarted(sheet, data, colIndex, targetRowIndex, folderId);
  } else {
    Logger.log(`‚ùå '${rowLabel}' row not found under year ${currentYear}.`);
  }
}

function updateCumulativeTotalWithStarted(sheet, data, colIndex, cumulativeRowIndex, folderId) {
  const currentYear = new Date().getFullYear().toString();
  const rowLabel = 'Cumulative Total with "started" ones included';
  let targetRowIndex = -1;

  for (let i = cumulativeRowIndex + 1; i < Math.min(data.length, cumulativeRowIndex + 20); i++) {
    const label = data[i][0]?.toString().trim();
    Logger.log(`üîé Checking row ${i + 1}: '${label}'`);
    if (label === rowLabel) {
      targetRowIndex = i;
      break;
    }
  }

  if (targetRowIndex !== -1) {
    const hifStartedVal = getCSVStatusCount(folderId, ["HIF Started"]);
    const cumulativeVal = getCSVStatusCount(folderId, ["HIF Signed", "HIF Completed"]);

    Logger.log(`üîç From CSV ‚Äî HIF Started: ${hifStartedVal}, Completed/Signed: ${cumulativeVal}`);
    const total = hifStartedVal + cumulativeVal;

    const existingVal = sheet.getRange(targetRowIndex + 1, colIndex + 1).getValue();
    if (!existingVal || existingVal.toString().trim() === "") {
      sheet.getRange(targetRowIndex + 1, colIndex + 1).setValue(total);
      Logger.log(`‚úÖ Set combined total (${rowLabel}): ${total}`);
    } else {
      Logger.log(`‚ÑπÔ∏è Cell already has value (${existingVal}); skipping update.`);
    }
  } else {
    Logger.log(`‚ùå '${rowLabel}' row not found under year ${currentYear}.`);
  }
}

function updateEligibleAssignments(sheet, data, colIndex, folderId) {
  const currentYear = new Date().getFullYear().toString();
  const rowLabel = "HIF Completed/Signed assignment eligible";
  let targetRowIndex = -1;

  const yearRowIndex = data.findIndex(row => row[0]?.toString().trim() === currentYear);
  if (yearRowIndex === -1) {
    Logger.log(`‚ùå Year row '${currentYear}' not found.`);
    return;
  }

  for (let i = yearRowIndex + 1; i < Math.min(data.length, yearRowIndex + 20); i++) {
    if (data[i][0]?.toString().trim() === rowLabel) {
      targetRowIndex = i;
      break;
    }
  }

  if (targetRowIndex === -1) {
    Logger.log(`‚ùå Row '${rowLabel}' not found.`);
    return;
  }

  const count = getEligibleAssignmentCount(folderId);
  if (count !== null) {
    const cell = sheet.getRange(targetRowIndex + 1, colIndex + 1);
    const existingVal = cell.getValue();
    if (!existingVal || existingVal.toString().trim() === "") {
      cell.setValue(count);
      Logger.log(`‚úÖ Set '${rowLabel}' count: ${count}`);
    } else {
      Logger.log(`‚ÑπÔ∏è Cell already has value (${existingVal}); skipping update.`);
    }
  } else {
    Logger.log("‚ùå Could not retrieve eligible assignment count.");
  }
}

function getCSVStatusCount(folderId, targetStatuses) {
  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFilesByType(MimeType.CSV);

  if (!files.hasNext()) {
    Logger.log('‚ùå No CSV files found in the folder.');
    return null;
  }

  const file = files.next();
  const csvData = Utilities.parseCsv(file.getBlob().getDataAsString());
  const headers = csvData[0];
  const statusColumnIndex = headers.findIndex(header => header.toLowerCase().includes("status"));

  if (statusColumnIndex === -1) {
    Logger.log('‚ùå Status column not found in CSV file.');
    return null;
  }

  targetStatuses = targetStatuses.map(status => status.toLowerCase());

  const filteredRows = csvData.slice(1).filter(row => {
    const status = row[statusColumnIndex]?.trim().toLowerCase();
    return targetStatuses.some(statusText => status === statusText);
  });

  Logger.log(`üîç Filtered Rows Count: ${filteredRows.length}`);
  return filteredRows.length;
}

function getEligibleAssignmentCount(folderId) {
  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFilesByType(MimeType.CSV);

  if (!files.hasNext()) {
    Logger.log('‚ùå No CSV files found in the folder.');
    return null;
  }

  const file = files.next();
  const csvData = Utilities.parseCsv(file.getBlob().getDataAsString());
  const headers = csvData[0].map(h => h.trim().toLowerCase());

  Logger.log(`üìù CSV Headers: ${headers.join(', ')}`);

  const efPaidIndex = headers.findIndex(h => h === "ef paid");
  const regIndex = headers.findIndex(h => h === "a&r registration date");
  const signedIndex = headers.findIndex(h => h === "contract signed date");

  Logger.log(`üîé Found column indices - EF Paid: ${efPaidIndex}, Reg Date: ${regIndex}, Contract Signed: ${signedIndex}`);

  if (efPaidIndex === -1 || regIndex === -1 || signedIndex === -1) {
    Logger.log('‚ùå Required columns (EF Paid, Registration Date, Contract Signed Date) not found.');
    return null;
  }

  const eligibleRows = csvData.slice(1).filter(row => {
    return row[efPaidIndex]?.trim() && row[regIndex]?.trim() && row[signedIndex]?.trim();
  });

  Logger.log(`üìä Eligible assignment rows found: ${eligibleRows.length}`);
  return eligibleRows.length;
}

function updateYearlyChange(sheet, data, colIndex) {
  const currentYear = new Date().getFullYear();
  const previousYear = currentYear - 1;
  const labelTemplate = `Increase/decrease (${previousYear} to ${currentYear}, using grey total for both)`;

  Logger.log(`üîé Checking for the current year row: ${currentYear}`);

  // Define custom date ranges for the current and previous year
  const currentYearDateRange = { 
    startDate: new Date('2025-04-28'),
    endDate: new Date('2025-05-04')
  };

  const prevYearDateRange = { 
    startDate: new Date('2024-05-06'),
    endDate: new Date('2024-05-12')
  };

  // Locate the row for the current year
  const currentYearIndex = data.findIndex(row => row[0]?.toString().trim() === currentYear.toString());
  if (currentYearIndex === -1) {
    Logger.log(`‚ùå Could not find current year row: ${currentYear}`);
    return;
  }

  Logger.log(`üìÖ Found current year row: ${currentYear} (row ${currentYearIndex + 1})`);

  // Locate the rows for "Cumulative total Completed*/Signed (no started)" for both years
  const cumulativeLabel = "Cumulative total Completed*/Signed (no started)";

  Logger.log(`üîé Searching for '${cumulativeLabel}' under the current year and previous year`);

  // Function to find the target row for a given label under a given year
  const findRowUnderYear = (startIndex, label) => {
    for (let i = startIndex + 1; i < Math.min(data.length, startIndex + 20); i++) {
      if (data[i][0]?.toString().trim() === label) {
        return i;
      }
    }
    return -1;
  };

  const currentCumulativeRow = findRowUnderYear(currentYearIndex, cumulativeLabel);
  const prevYearIndex = data.findIndex(row => row[0]?.toString().trim() === previousYear.toString());
  const prevCumulativeRow = findRowUnderYear(prevYearIndex, cumulativeLabel);

  if (currentCumulativeRow === -1 || prevCumulativeRow === -1) {
    Logger.log(`‚ùå Could not find cumulative total row for one of the years: ${previousYear}, ${currentYear}`);
    return;
  }

  Logger.log(`‚úÖ Found required rows - current year cumulative: ${currentCumulativeRow + 1}, previous year cumulative: ${prevCumulativeRow + 1}`);

  // Count the true values for the current year within the custom date range
  const currentYearCount = getCountForDateRange(sheet, data, currentCumulativeRow, colIndex, currentYearDateRange);

  // Count the true values for the previous year within the custom date range
  const prevYearCount = getCountForDateRange(sheet, data, prevCumulativeRow, colIndex, prevYearDateRange);

  // Calculate the change (difference between the two counts)
  const change = currentYearCount - prevYearCount;

  // Find the row where the yearly change should be inserted
  const targetRow = data.findIndex(row => row[0]?.toString().trim() === labelTemplate);

  if (targetRow !== -1) {
    const targetCell = sheet.getRange(targetRow + 1, colIndex + 1);
    const currentValue = targetCell.getValue();

    if (!currentValue) {
      targetCell.setValue(change);
      Logger.log(`‚úÖ Inserted yearly change (${currentYear} - ${previousYear}): ${change}`);
    } else {
      Logger.log(`‚ÑπÔ∏è Yearly change already exists, skipping insertion.`);
    }
  } else {
    Logger.log(`‚ùå Could not find label '${labelTemplate}' for yearly change.`);
  }
}

// Helper function to count the true values for a specific date range
function getCountForDateRange(sheet, data, rowIndex, colIndex, dateRange) {
  let count = 0;
  
  // Loop through the data and find rows that fall within the date range
  for (let i = rowIndex + 1; i < Math.min(data.length, rowIndex + 20); i++) {
    const rowDate = new Date(data[i][0]);
    const value = sheet.getRange(i + 1, colIndex + 1).getValue();
    
    // Check if the row date is within the date range and the value is true
    if (rowDate >= dateRange.startDate && rowDate <= dateRange.endDate && value === true) {
      count++;
    }
  }
  
  return count;
}

function updateLLCInterestNoted(sheet, data, colIndex, folderId) {
  const currentYear = new Date().getFullYear().toString();
  const rowLabel = "LLC interest noted";

  const yearRowIndex = data.findIndex(row => row[0]?.toString().trim() === currentYear);
  if (yearRowIndex === -1) {
    Logger.log(`‚ùå Year row '${currentYear}' not found.`);
    return;
  }

  let targetRowIndex = -1;
  for (let i = yearRowIndex + 1; i < Math.min(data.length, yearRowIndex + 20); i++) {
    if (data[i][0]?.toString().trim() === rowLabel) {
      targetRowIndex = i;
      break;
    }
  }

  if (targetRowIndex === -1) {
    Logger.log(`‚ùå Row '${rowLabel}' not found.`);
    return;
  }

  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFilesByType(MimeType.CSV);

  if (!files.hasNext()) {
    Logger.log('‚ùå No CSV files found in the folder.');
    return;
  }

  const file = files.next();
  const csvData = Utilities.parseCsv(file.getBlob().getDataAsString());
  const headers = csvData[0].map(h => h.trim().toLowerCase());

  const llcIndex = headers.findIndex(h => h === "llc interest");
  if (llcIndex === -1) {
    Logger.log(`‚ùå 'LLC Interest' column not found in CSV.`);
    return;
  }

  const count = csvData.slice(1).filter(row => row[llcIndex]?.trim().toLowerCase() === "true").length;
  Logger.log(`üìä LLC Interest TRUE count: ${count}`);

  const cell = sheet.getRange(targetRowIndex + 1, colIndex + 1);
  const existingVal = cell.getValue();
  if (!existingVal || existingVal.toString().trim() === "") {
    cell.setValue(count);
    Logger.log(`‚úÖ Set '${rowLabel}' count: ${count}`);
  } else {
    Logger.log(`‚ÑπÔ∏è Cell already has value (${existingVal}); skipping update.`);
  }
}
function updateLLCApplicationsSubmitted(sheet, data, colIndex, folderId) {
  const currentYear = new Date().getFullYear().toString();
  const rowLabel = "LLC Applications Submitted";

  const yearRowIndex = data.findIndex(row => row[0]?.toString().trim() === currentYear);
  if (yearRowIndex === -1) {
    Logger.log(`‚ùå Year row '${currentYear}' not found.`);
    return;
  }

  let targetRowIndex = -1;
  for (let i = yearRowIndex + 1; i < Math.min(data.length, yearRowIndex + 20); i++) {
    if (data[i][0]?.toString().trim() === rowLabel) {
      targetRowIndex = i;
      break;
    }
  }

  if (targetRowIndex === -1) {
    Logger.log(`‚ùå Row '${rowLabel}' not found.`);
    return;
  }

  const folder = DriveApp.getFolderById(folderId);
  const files = folder.getFilesByType(MimeType.CSV);

  if (!files.hasNext()) {
    Logger.log('‚ùå No CSV files found in the folder.');
    return;
  }

  const file = files.next();
  const csvData = Utilities.parseCsv(file.getBlob().getDataAsString());
  const headers = csvData[0].map(h => h.trim().toLowerCase());

  const apPulledIndex = headers.findIndex(h => h === "llc ap pulled");
  if (apPulledIndex === -1) {
    Logger.log(`‚ùå 'LLC Ap Pulled' column not found in CSV.`);
    return;
  }

  const count = csvData.slice(1).filter(row => row[apPulledIndex]?.trim().toLowerCase() === "true").length;
  Logger.log(`üìä LLC Ap Pulled TRUE count: ${count}`);

  const cell = sheet.getRange(targetRowIndex + 1, colIndex + 1);
  const existingVal = cell.getValue();
  if (!existingVal || existingVal.toString().trim() === "") {
    cell.setValue(count);
    Logger.log(`‚úÖ Set '${rowLabel}' count: ${count}`);
  } else {
    Logger.log(`‚ÑπÔ∏è Cell already has value (${existingVal}); skipping update.`);
  }
}


